{"remainingRequest":"/Users/gkeele/dev/ldsmedia/web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gkeele/dev/ldsmedia/web/src/views/EventCreate.vue?vue&type=style&index=0&id=469630ec&lang=scss&scoped=true&","dependencies":[{"path":"/Users/gkeele/dev/ldsmedia/web/src/views/EventCreate.vue","mtime":1575502924792},{"path":"/Users/gkeele/dev/ldsmedia/web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gkeele/dev/ldsmedia/web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/gkeele/dev/ldsmedia/web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/gkeele/dev/ldsmedia/web/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gkeele/dev/ldsmedia/web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/gkeele/dev/ldsmedia/web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZmllbGQgewogIG1hcmdpbi1ib3R0b206IDI0cHg7Cn0K"},{"version":3,"sources":["EventCreate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwGA;AACA;AACA","file":"EventCreate.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div>\n    <h1>Create an Event, {{ user.name }}</h1>\n    <form @submit.prevent=\"createEvent\">\n      <label>Select a category</label>\n      <select v-model=\"event.category\">\n        <option v-for=\"cat in categories\" :key=\"cat\">{{ cat }}</option>\n      </select>\n      <h3>Name & describe your event</h3>\n      <div class=\"field\">\n        <label>Title</label>\n        <input v-model=\"event.title\" type=\"text\" placeholder=\"Add an event title\" />\n      </div>\n      <div class=\"field\">\n        <label>Description</label>\n        <input v-model=\"event.description\" type=\"text\" placeholder=\"Add a description\" />\n      </div>\n      <h3>Where is your event?</h3>\n      <div class=\"field\">\n        <label>Location</label>\n        <input v-model=\"event.location\" type=\"text\" placeholder=\"Add a location\" />\n      </div>\n      <h3>When is your event?</h3>\n      <div class=\"field\">\n        <label>Date</label>\n        <datepicker v-model=\"event.date\" placeholder=\"Select a date\" />\n      </div>\n      <div class=\"field\">\n        <label>Select a time</label>\n        <select v-model=\"event.time\">\n          <option v-for=\"time in times\" :key=\"time\">{{ time }}</option>\n        </select>\n      </div>\n      <input type=\"submit\" class=\"button -fill-gradient\" value=\"Submit\" />\n    </form>\n    <!--    <p>This event was created by {{ user.id }}</p>\n    <p>There are {{ catLength }} categories:</p>\n    <ul>\n      <li v-for=\"cat in categories\" :key=\"cat\">{{ cat }}</li>\n    </ul>\n    <p>{{ getEventById(2) }}</p>-->\n  </div>\n</template>\n\n<script>\nimport { mapState, mapGetters } from 'vuex'\nimport Datepicker from 'vuejs-datepicker'\n\nexport default {\n  components: {\n    Datepicker\n  },\n  data() {\n    const times = []\n    for (let i = 1; i <= 24; i++) {\n      times.push(i + ':00')\n    }\n    return {\n      event: this.createFreshEvent(),\n      times,\n      categories: this.$store.state.categories\n    }\n  },\n  methods: {\n    createEvent() {\n      this.$store\n        .dispatch('event/createEvent', this.event)\n        .then(() => {\n          this.$router.push({\n            name: 'event-show',\n            params: { id: this.event.id }\n          })\n          this.event = this.createFreshEvent()\n        })\n        .catch(() => {})\n    },\n    createFreshEvent() {\n      const user = this.$store.state.user\n      const id = Math.floor(Math.random() * 10000000)\n      return {\n        id: id,\n        user: user,\n        category: '',\n        organizer: user,\n        title: '',\n        description: '',\n        location: '',\n        date: '',\n        time: '',\n        attendees: []\n      }\n    }\n  },\n  computed: {\n    catLength() {\n      return this.$store.getters.catLength\n    },\n    ...mapGetters(['getEventById']),\n    ...mapState(['user'])\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.field {\n  margin-bottom: 24px;\n}\n</style>\n"]}]}